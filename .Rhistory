figure1
figure1<-ggplot(mtcars,aes(x=factor(am, labels = c("Manual","Auto")),y=mpg,fill=factor(am, labels = c("Manual","Auto"))))
figure1<-figure1+geom_boxplot()
figure1<-figure1+scale_fill_discrete(name = "Transmission Type")
figure1<-figure1 + theme_bw() + xlab("Transmission Type") + ylab("Miles Per Gallon")
figure1
plot(fit3)
par(mfrow = c(2, 2))
plot(fit3)
plot(fit5)
head(mtcars)
pars(mtcars)
pairs(mtcars)
pairs(mtcars,panel = panel.smooth)
?mtcars
fit5<-lm(mpg ~ factor(am) + cyl + hp + drat + carb, data = mtcars)
plot(fit5)
anova(fit1,fit3,fit5)
fit5<-lm(mpg ~ factor(am) + cyl + hp + drat + qsec, data = mtcars)
anova(fit1,fit3,fit5)
fit5<-lm(mpg ~ factor(am) + cyl + hp + wt + qsec, data = mtcars)
anova(fit1,fit3,fit5)
fit5<-lm(mpg ~ factor(am) + cyl + hp + wt + disp, data = mtcars)
anova(fit1,fit3,fit5)
lm(data=mtcars,disp~hp)
plot(mtcars$disp,mtcars$hp)
rm(list=ls())
library(ggplot2)
data("mtcars")
head(mtcars)
figure1<-ggplot(mtcars,aes(x=factor(am, labels = c("Manual","Auto")),y=mpg,fill=factor(am, labels = c("Manual","Auto"))))
figure1<-figure1+geom_boxplot()
figure1<-figure1+scale_fill_discrete(name = "Transmission Type")
figure1<-figure1 + theme_bw() + xlab("Transmission Type") + ylab("Miles Per Gallon")
figure1
fit1<-lm(mpg ~ factor(am), data = mtcars)
summary(fit1)
confint(fit1)
fit4<-lm(mpg ~ factor(am) + cyl + hp + wt, data = mtcars)
summary(fit4)
confint(fit4)
fit6<-lm(mpg ~ factor(am) + cyl + hp + wt + disp +qsec, data = mtcars)
summary(fit6)
confint(fit6)
anova(fit1,fit4,fit6)
par(mfrow = c(2, 2))
plot(fit5)
plot(fit6)
plot(fit4)
fit3<-lm(mpg ~ factor(am) + cyl + hp , data = mtcars)
plot(fit3)
fit1<-lm(mpg ~ factor(am), data = mtcars)
summary(fit1)
confint(fit1)
fit4<-lm(mpg ~ factor(am) + cyl + hp , data = mtcars)
summary(fit4)
confint(fit4)
fit6<-lm(mpg ~ factor(am) + cyl + hp + wt  data = mtcars)
summary(fit6)
confint(fit6)
anova(fit1,fit4,fit6)
fit1<-lm(mpg ~ factor(am), data = mtcars)
summary(fit1)
confint(fit1)
fit4<-lm(mpg ~ factor(am) + cyl + hp , data = mtcars)
summary(fit4)
confint(fit4)
fit6<-lm(mpg ~ factor(am) + cyl + hp + wt,  data = mtcars)
summary(fit6)
confint(fit6)
anova(fit1,fit4,fit6)
plot(fit4)
nt_mtcars<-subset(mtcars,select = -am)
View(nt_mtcars)
pairs(nt_mtcars, panel = panel.smooth, col = am)
pairs(nt_mtcars, panel = panel.smooth, col = nt_mtcars$am)
pairs(nt_mtcars, panel = panel.smooth, col = 9 + nt_mtcars$am)
pairs(nt_mtcars, panel = panel.smooth, col = 9 + nt_mtcars$am)
pairs(nt_mtcars, panel = panel.smooth, col = 100 + nt_mtcars$am)
pairs(nt_mtcars, panel = panel.smooth, col = 100 * nt_mtcars$am)
pairs(nt_mtcars, panel = panel.smooth, col = 10 * nt_mtcars$am + 9)
x=c(1,2,3)
y=c(2,3,4)
plot*x,y
plot(x,y)
plot(x,y,col=1)
plot(x,y,col=2)
plot(x,y,col=3)
plot(x,y,col=4)
plot(x,y,col=0)
plot(x,y,col=1)
plot(x,y,col=2)
plot(x,y,col=3)
plot(x,y,col=4)
plot(x,y,col=6)
plot(x,y,col=5)
plot(x,y,col=7)
plot(x,y,col=6)
plot(x,y,col=8)
plot(x,y,col=9)
plot(x,y,col=10)
plot(x,y,col=11)
pairs(nt_mtcars, panel = panel.smooth, col =  nt_mtcars$am +1)
pairs(nt_mtcars, panel = panel.smooth, col =  mtcars$am +1)
pairs(nt_mtcars, panel = panel.smooth, col =  mtcars$am +2)
View(mtcars)
View(mtcars)
nt_mtcars<-subset(mtcars,select = c(1:7))
pairs(nt_mtcars, panel = panel.smooth, col =  mtcars$am +2)
install.packages(c("car", "nlme", "Rcpp"))
install.packages(c("car", "nlme", "Rcpp"))
install.packages(c("car", "nlme", "Rcpp"))
install.packages(c("car", "nlme", "Rcpp"))
install.packages(c("car", "nlme", "Rcpp"))
figure1<-ggplot(mtcars,aes(x=factor(am, labels = c("Manual","Auto")),y=mpg,fill=factor(am, labels = c("Manual","Auto"))))
figure1<-figure1+geom_boxplot()
figure1<-figure1+scale_fill_discrete(name = "Transmission Type")
figure1<-figure1 + theme_bw() + xlab("Transmission Type") + ylab("Miles Per Gallon")
figure1
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
data("mtcars")
head(mtcars)
?mtcars
library(ggplot2)
data("mtcars")
head(mtcars)
nt_mtcars<-subset(mtcars,select = c(1:7))
pairs(nt_mtcars, panel = panel.smooth, col =  mtcars$am +2)
figure1<-ggplot(mtcars,aes(x=factor(am, labels = c("Auto","Manual")),y=mpg,fill=factor(am, labels = c("Auto","Manual"))))
figure1<-figure1+geom_boxplot()
figure1<-figure1+scale_fill_discrete(name = "Transmission Type")
figure1<-figure1 + theme_bw() + xlab("Transmission Type") + ylab("Miles Per Gallon")
figure1
fit1<-lm(mpg ~ factor(am), data = mtcars)
summary(fit1)
fit4<-lm(mpg ~ factor(am) + cyl + hp + wt, data = mtcars)
summary(fit4)
fit6<-lm(mpg ~ factor(am) + cyl + hp + wt + disp +qsec, data = mtcars)
summary(fit6)
anova(fit1,fit4,fit6)
par(mfrow = c(2, 2))
plot(fit4)
x=c(1,2,3)
y=c(2,3,4)
plot(x,y)
plot(x,y,col=2)
plot(x,y,col=3)
summary(fit1)
fit4<-lm(mpg ~ factor(am) + cyl + hp + wt, data = mtcars)
summary(fit4)
fit6<-lm(mpg ~ factor(am) + cyl + hp + wt + disp +qsec, data = mtcars)
summary(fit6)
anova(fit1,fit4,fit6)
confint(fit4)
summary(fit4)
anova(fit1,fit4,fit6)
install.packages("caret")
install.packages("kernlab")
library(kernlab)
data(spam)
install.packages(ISLR)
install.packages("ISLR")
library(ISLR)
data(wage)
data(Wage)
summary(Wage)
library(caret)
install.packages("caret")
install.packages("caret")
library(caret)
inTrain<-createDataPartition(y=Wage$wage,p=0.7,list=FALSE)
install.packages("caret")
install.packages("ggplot2")
install.packages("ISLR")
library(caret)
library(ISLR)
data(Wage)
inTrain<-createDataPartition(y=Wage$wage,p=0.7,list=FALSE)
training<-Wage[inTrain,]
testing<-Wage[-inTrain,]
featurePlot(x=training[,c("age","education","jobclass")],y=training$wage,plot = "pairs")
qplot(age,wage,data=training)
qplot(age,wage,data=training,colour=jobclass)
qplot(age,wage,data=training,colour=education)
qq<-qplot(age,wage,data=training,colour=education)
qq+geom_smooth(method="lm",formula = y~x)
install.packages("Hmisc")
cutWage<-cut2(training$age)
library(Hmisc)
cutWage<-cut2(training$age)
cutWage<-cut2(training$age,g=3)
table(cutWage)
qplot(cutWage,age,data=training,geom = c("boxplot"))
qplot(cutWage,age,data=training,geom = c("boxplot"),fill=cutWage)
qplot(cutWage,age,data=training,geom = "boxplot",fill=cutWage)
qplot(cutWage,age,data=training,geom = c("boxplot","jitter"),fill=cutWage)
table(cutWage,training)
table(cutWage,training$jobclass)
qplot(wage,colour=education,data=training,geom = c("density"))
?Wage
install.packages("kernlab")
library(kernlab)
data(spam)
inTrain<-createDataPartition(y=spam$type,p=0.75,list=FALSE)
training<-spam[inTrain,]
testing<-spam[-inTrain,]
hist(training$capitalAve)
preObj<-preProcess(traning[,-"type"],method=c("center","scale"))
preObj<-preProcess(training[,-"type"],method=c("center","scale"))
preObj<-preProcess(training[,-c("type")],method=c("center","scale"))
preObj<-preProcess(training[,-c58],method=c("center","scale"))
preObj<-preProcess(training[,-58],method=c("center","scale"))
inTrain<-createDataPartition(Wage$wage,p=0.7,list=FALSE)
training<-Wage[inTrain,]
testing<-Wage[-inTrain,]
dummies<-dummyVars(wage~jobclass,data=training)
nsv<-nearZeroVar(training,saveMetrics = TRUE)
nsv
help(package=splines)
?bs()
bsBasis<-bs(training$age,df=3)
library(splines)
bsBasis<-bs(training$age,df=3)
bsBasis
lm1<-lm(wage~bsBasis,data=training)
plot(training$age,training$wage,pch=19,cex=0.5)
points(training$age,predict(lm1,newdata=training),col="red",pch=19,cex=0.5)
lines(training$age,predict(lm1,newdata=training),col="red",pch=19,cex=0.5)
a<-predict(lm1,newdata=training)
rm(list=ls())
data(spam)
inTrain<-createDataPartition(spam$type,p=0.75,list=FALSE)
training<-spam[inTrain,]
testning<-spam[-inTrain,]
M<-abs(cor(training[,-58]))
diag(M)<-0
which(M>0.8,arr.ind = TRUE)
?which
names(training)[32]
names(training)[34]
names(training)[40]
which(M>0.8,arr.ind = F)
which(M>0.8,arr.ind = T)
a<-which(M>0.8,arr.ind = T)
plot(spam[,40],spam[,32])
plot(spam[,40],spam[,34])
plot(spam[,32],spam[,34])
princomp(spam[,c(32,34,40)])
princomp(spam[,c(32,34,40)])$x
princomp(spam[,c(32,34,40)])$x[,1]
a<-princomp(spam[,c(32,34,40)])
a$x
a<-spam[,c(32,34,40)]
b<-princomp(a)
b$x
plot(b$x[,1],b[,2])
plot(b$x[,1],b$x[,2])
b
b$center
b$loadings
b$scores
?princomp
loadings(b$loadings)
b$loadings
b<-prcomp(a)
plot(b$x[,1],b$x[,2])
b$rotation
data(eruption)
data("faithful")
summary(faithful)
View(faithful)
View(faithful)
rm(list=ls())
data("Wage")
head(Wage)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
?preProcess
install.packages("AppliedPredictiveModeling")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preObj <- preProcess(training[, IL_col_idx], method=c("center", "scale", "pca"), thresh=0.8)
preObj
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
preObj <- preProcess(training[, IL_col_idx], method=c("center", "scale", "pca"), thresh=0.8)
Error in `[.data.frame`(training, , IL_col_idx) :
preObj
View(adData)
names(training)[58]
names(training)[59]
install.packages("rattle")
install.packages("ElemStatLearn")
library(ElemStatLearn)
data("ozone")
head(ozone)
dim(ozone)
View(ozone)
View(ozone)
?bag
?ctreeBag
ctreeBag
library(ggplot2)
library(caret)
library(rattle)
library(rpart)
library(rpart.plot)
library(randomForest)
trainUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
if (!file.exists("training.csv"))
download.file(trainUrl, "training.csv", method="auto")
setwd("C:/Users/Administrator/OneDrive/Course/pratical machine learning/Prediction_Assignment_Writeup/.git")
library(ggplot2)
library(caret)
library(rattle)
library(rpart)
library(rpart.plot)
library(randomForest)
trainUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
if (!file.exists("training.csv"))
download.file(trainUrl, "training.csv", method="auto")
setwd("C:/Users/Administrator/OneDrive/Course/pratical machine learning/Prediction_Assignment_Writeup")
library(ggplot2)
library(caret)
library(rattle)
library(rpart)
library(rpart.plot)
library(randomForest)
trainUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
if (!file.exists("training.csv"))
download.file(trainUrl, "training.csv", method="auto")
if (!file.exists("testing.csv"))
download.file(testUrl, "testing.csv", method="auto")
training<-read.csv("training.csv")
testing<-read.csv("testing.csv")
trainingNZV <- nearZeroVar(training, saveMetrics=TRUE)
training<-training[,!trainingNZV$nzv]
nanum<-apply(is.na(training),2,sum)
training<-training[,!(nanum/dim(training)>0.8)]
training<-training[,-1]
colindex<-NULL
for (i in 1:length(colnames(training))){
temp<-grep(colnames(training)[i],colnames(testing))
if(length(temp)>0)
colindex[i]<-temp
}
testing<-testing[,colindex]
set.seed(9527)
inTrain<-createDataPartition(training$classe, p = 0.6, list = FALSE)
Mytraining<-training[inTrain,]
Mytesting<-training[-inTrain,]
mod_rf<-train(classe ~ . , method = "rf" , data = Mytraining)
rm(list=ls())
library(ggplot2)
library(caret)
library(rattle)
library(randomForest)
trainUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
if (!file.exists("training.csv"))
download.file(trainUrl, "training.csv", method="auto")
if (!file.exists("testing.csv"))
download.file(testUrl, "testing.csv", method="auto")
training<-read.csv("training.csv")
testing<-read.csv("testing.csv")
trainingNZV <- nearZeroVar(training, saveMetrics=TRUE)
training<-training[,!trainingNZV$nzv]
nanum<-apply(is.na(training),2,sum)
training<-training[,!(nanum/dim(training)>0.8)]
training<-training[,-1]
training$classe<-as.factor(training$classe)
colindex<-NULL
for (i in 1:length(colnames(training))){
temp<-grep(colnames(training)[i],colnames(testing))
if(length(temp)>0)
colindex[i]<-temp
}
testing<-testing[,colindex]
set.seed(9527)
inTrain<-createDataPartition(training$classe, p = 0.65, list = FALSE)
Mytraining<-training[inTrain,]
Mytesting<-training[-inTrain,]
mod_rf<-train(classe ~ . , method = "rf" , data = Mytraining)
mod_gbm<-train(classe ~ . , method = "gbm" , data = Mytraining)
mod_lda<-train(classe ~ . , method = "lda" , data = Mytraining)
pred_rf<-predict(mod_rf, newdata = Mytesting)
pred_gbm<-predict(mod_gbm, newdata = Mytesting)
pred_lda<-predict(mod_lda, newdata = Mytesting)
Mycomb_pred<-data.frame(pred_rf, pred_gbm, pred_lda, Mytesting$classe)
mod_comb<-train(classe ~ . , method = "gam", data = Mycomb_pred)
Mycomb_pred<-data.frame(pred_rf, pred_gbm, pred_lda, classe = Mytesting$classe)
mod_comb<-train(classe ~ . , method = "gam", data = Mycomb_pred)
pred_comb<-predict(mod_comb, newdata = Mytesting)
confusionMatrix(pred_rf, Mytesting$classe)$overall[1]
confusionMatrix(pred_gbm, Mytesting$classe)$overall[1]
confusionMatrix(pred_lda, Mytesting$classe)$overall[1]
confusionMatrix(pred_comb, Mytesting$classe)$overall[1]
mod_comb<-train(classe ~ . , method = "glm", data = Mycomb_pred)
pred_comb<-predict(mod_comb, newdata = Mytesting)
confusionMatrix(pred_rf, Mytesting$classe)$overall[1]
confusionMatrix(pred_gbm, Mytesting$classe)$overall[1]
confusionMatrix(pred_lda, Mytesting$classe)$overall[1]
confusionMatrix(pred_comb, Mytesting$classe)$overall[1]
mod_comb<-train(classe ~ . , method = "gbm", data = Mycomb_pred)
pred_comb<-predict(mod_comb, newdata = Mytesting)
confusionMatrix(pred_rf, Mytesting$classe)$overall[1]
confusionMatrix(pred_gbm, Mytesting$classe)$overall[1]
confusionMatrix(pred_lda, Mytesting$classe)$overall[1]
confusionMatrix(pred_comb, Mytesting$classe)$overall[1]
plot(mod_rf$finalModel)
plot(mod_bgm$finalModel)
plot(mod_gbm$finalModel)
plot(mod_gbm)
plot(mod_rf)
plot(mod_lda)
plot(mod_lda$finalModel)
con_rf<-confusionMatrix(pred_rf, Mytesting$classe)
con_gbm<-confusionMatrix(pred_gbm, Mytesting$classe)
con_lda<-confusionMatrix(pred_lda, Mytesting$classe)
con_comb<-confusionMatrix(pred_comb, Mytesting$classe)
plot(con_rf$table)
con_rf$table
plot(con_rf$table,col = Prediction)
a<-con_rf$table
plot.table(con_rf$table, smain='Correlation', highlight = TRUE, colorbar = TRUE)
library(quantmod)
plot.table(con_rf$table, smain='Correlation', highlight = TRUE, colorbar = TRUE)
install.packages("tableplot")
library(tableplot)
tableplot(con_rf$table)
plot(con_rf$table,col = Prediction)
plot(con_rf$table)
colmatrix<-as.matrix(con_rf$table)
dim(con_rf$byClass)
for (i in 1:dim(colmatrix)[2]) colmatrix[,i]=i
colmatrix<-as.factor(colmatrix)
plot(con_rf$table,col = colmatrix)
plot(con_rf$table,col = "white")
plot(con_rf$table,col = "white", paste("Random Forest Confusion Matrix: Accuracy =", round(con_rf$overall['Accuracy'], 4)))
plot(con_rf$table,col = "white", main = paste("Random Forest Confusion Matrix: Accuracy =", round(con_rf$overall['Accuracy'], 4)))
plot(mod_rf$finalModel)
plot(mod_rf$finalModel, main = "Random Forest Model")
plot(con_rf$table,col = "white", main = paste("Random Forest Confusion Matrix: Accuracy =", round(con_rf$overall['Accuracy'], 4)))
plot(mod_gbm$finalModel, main = "Boosting Model")
plot(con_gbm$table,col = "white", main = paste("Boosting Confusion Matrix: Accuracy =", round(con_gbm$overall['Accuracy'], 4)))
plot(mod_lda$finalModel, main = "Linear Discriminant Analysis Model")
plot(con_lda$table,col = "white", main = paste("Linear Discriminant Analysis Confusion Matrix: Accuracy =", round(con_lda$overall['Accuracy'], 4)))
plot(mod_comb$finalModel, main = "Combined Model")
plot(con_comb$table,col = "white", main = paste("Combined Confusion Matrix: Accuracy =", round(con_comb$overall['Accuracy'], 4)))
plot(mod_comb, main = "Combined Model")
tpred_rf<-predict(mod_rf, newdata = testing)
tpred_gbm<-predict(mod_gbm, newdata = testing)
tpred_lda<-predict(mod_lda, newdata = testing)
table(tpred_rf,tpred_gbm)
table(tpred_rf,tpred_lda)
Mycomb_tpred<-data.frame(tpred_rf, tpred_gbm, tpred_lda)
tpred_comb<-predict(mod_comb, newdata = Mycomb_tpred)
table(tpred_rf,tpred_comb)
length(tpred_comb)
Mycomb_tpred<-data.frame(pred_rf=tpred_rf, pred_gbm=tpred_gbm, pred_lda=tpred_lda)
tpred_comb<-predict(mod_comb, newdata = Mycomb_tpred)
table(tpred_rf,tpred_comb)
?nearZeroVar
trainingNZV <- nearZeroVar(training, saveMetrics=TRUE)
View(Mytraining)
View(Mytraining)
plot(con_lda$table,col = "white", main = paste("Linear Discriminant Analysis Confusion Matrix: Accuracy =", round(con_lda$overall['Accuracy'], 4)))
con_lda
plot(con_lda$table,col = "white", main = paste("Linear Discriminant Analysis Confusion Matrix: Accuracy =", round(con_lda$overall['Accuracy'], 4)))
plot(mod_rf$finalModel, main = "Random Forest Model")
plot(con_rf$table,col = "white", main = paste("Random Forest Confusion Matrix: Accuracy =", round(con_rf$overall['Accuracy'], 4)))
plot(mod_gbm, main = "Boosting Model")
plot(con_gbm$table,col = "white", main = paste("Boosting Confusion Matrix: Accuracy =", round(con_gbm$overall['Accuracy'], 4)))
plot(con_comb$table,col = "white", main = paste("Combined Confusion Matrix: Accuracy =", round(con_comb$overall['Accuracy'], 4)))
?write.table
```{r}
problem_id=1:length(tpred_comb)
write.table(data.frame(problem_id,classe=tpred_comb), file = "prediction.csv", sep = "\t")
```
a<-data.frame(problem_id,classe=tpred_comb)
prediction_final<-data.frame(problem_id,classe=tpred_comb)
write.table(prediction_final, file = "prediction.csv", sep = "\t")
write.table(prediction_final, file = "prediction.csv", sep = "\t", row.names = FALSE)
write.table(prediction_final, file = "prediction.csv", sep = ",", row.names = FALSE)
